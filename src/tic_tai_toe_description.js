// import './App.css';
// import GameTicTacToe from "./tic-tac-toe/GameTicTacToe";
// import {useState} from "react";
// import MemoryGame from "./memory-game/.MemoryGame";
//
//
// function App() {
//     const [openGame, setOpenGame] = useState('')
//
//     const openApp = (game) => {
//         setOpenGame(game);
//     }
//
//     return (
//         <div className="App">
//             <h1>Games</h1>
//             <button onClick={() => openApp("TicTacToe")}> Крестики-нолики </button>
//             <button onClick={() => openApp("MemoryGame")}> Memory Game </button>
//
//             {openGame === "TicTacToe" && <GameTicTacToe/>}
//             {openGame === "MemoryGame" && <MemoryGame name={"Memory Game"}/>}
//
//         </div>
//     );
// }
//
// export default App;
// (отредактировано)
// 1 ответ
//
// Larisa Yagodina  7 д. назад
// Сделаем проект в отдельной папке. Заведите папку tic-tac-toe и в ней создайте файлы GameTicTacToe.js, Board.js, Square.js. Вызовите компонент GameTicTacToe в App.js.
//     Чтобы создать нужное количество ячеек и хранить там значения X и 0, создайте массив из 9 объектов. У каждого объекта есть id (используйте любую библиотеку, например, uuid или nanoid) и value (пустые ячейки будут null).
// Поле (границы ячеек) будет в файле Board.js. Нужно создать объект со стилями для этого поля: width, height, margin, display (grid - сетка), gridTemplate (шаблон сетки, например, 'repeat(3, 1fr) / repeat(3, 1fr)', и это значит, что будут созданы 3 ряда и 3 колонки с одинаковыми размерами). Можно задать параметры для границы, но можно обойтись без них (смотрите, как вам больше нравится визуально).
// Вот пример:
//     `const style = {
//    width: '450px',
//   }`
// Присвойте этот объект со стилями в тег div.
//     Вот пример:
//     `<div style={style}>`
// За отдельную ячейку будет отвечать компонент Square.js. Там тоже нужно создать объект со стилями и задать: фон, граница, размер и толщину шрифта, сам шрифт (например, fantasy), курсор (pointer - в виде кисти с указательным пальцем),
// Присвойте этот объект со стилями в тег div.
//     Теперь создадим поле из 9 ячеек. Для этого передайте массив объектов board в компонент Board.js. С помощью метода map и компонента Square.js создайте ячейки.
//     Так как у нас 2 игрока - X и 0, нам нужно каждый ход понимать, кто ходит. Первый ход и все остальные нечетные - X. Четные ходы - 0. Заведите переменную состояния countMoves, которая будет изначальна равна 1 и с каждым ходом (когда будет срабатывать функция на onClick) будет увеличиваться.
//     Создайте функцию handleClick, которая будет «ставить X или 0 в нужный квадратик». Функция должна определить, поставить X или 0. И она должна поменять значение value с null на X или 0 у объекта с нужным id. И также она должна поменять значение countMoves (та переменная, которая считает ходы).
// Передайте эту функцию в компонент Square и назначьте ее на кнопку (тег div). Не забудьте, что надо передать id.
//     Теперь нам нужна функция, которая будет определять победителя. Для победы нужно, чтобы в определенных объектах  массива board были одинаковые значения у value. Создайте массив lines, который будет содержать массивы из 3-х чисел - 3 индекса объектов board, которые должны содержать одинаковые значения, чтобы победить. Сколько выигрышных комбинаций, столько и массивов из 3-х индексов. Далее цикл for проходит по этим массивам и проверяет, совпадают ли значения value в объектах с этими индексами. Как только находит совпадение - возвращает результат. Результат - это или X, или 0. Функция будет срабатывать каждый ход. Если пока победителя нет, она должна возвратить null.
//     Вынесите эту функцию в отдельный файл calculateWinner.js и импортируйте ее в компонент GameTicTacToe.
//     Присвойте результат работы функции в переменную winner.
//     В компоненте GameTicTacToe в return создайте блок div со строкой. Пока победителя нет, строка говорит, кто делает следующий ход - X или 0. Когда победитель известен, строка говорит, кто победил.
//     Когда игра состоялась и есть победитель, нужна кнопка, которая начнет игру сначала. Создайте функцию reStart. Она будет возвращать начальные значения для массива объектов board и для переменной countMoves.
//     Создайте функцию renderButtonStartAgain, которая будет возвращать кнопку. На onClick этой кнопки назначьте функцию reStart.
//    В компоненте GameTicTacToe в return под блоком div со следующим игроком или победителем создайте условие. Если известен победитель, то сработает функция renderButtonStartAgain и появится кнопка «Start again».